[tool.poetry]
name = "silverspeak"
version = "2.3.0"
description = "A Python library to perform homoglyph-based attacks on text. It supports both identical and non-identical homoglyphs across multiple languages."
readme = "README.md"
license = "GPL-3.0"
authors = ["Aldan Creo <os@acmc.fyi>"]
keywords = [
    "homoglyph", "attack", "text", "security", "obfuscation", "phishing", 
    "spoofing", "unicode", "cybersecurity", "text-manipulation", 
    "text-security", "character-substitution", "text-obfuscation", 
    "identity-theft", "data-protection", "adversarial-attacks", 
    "unicode-homoglyphs", "text-attacks", "cyber-attacks", "information-security"
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
pandas = "^2.2.2"
unicodedataplus = "^16.0.0.post1"
tomli = "^2.0.1"

[tool.poetry.group.advanced]
optional = true

[tool.poetry.group.advanced.dependencies]
transformers = "^4.51.3"
torch = "^2.6.0"
nltk = "^3.8.1"  # For n-gram analysis strategy
pillow = "^10.0.0"  # For OCR confidence strategy
python-doctr = "^0.7.0"  # For OCR confidence strategy

[tool.poetry.group.spell-check]
optional = true

[tool.poetry.group.spell-check.dependencies]
symspellpy = "^6.7.0"
pyspellchecker = "^0.7.1"
python-Levenshtein = "^0.21.0"

[tool.poetry.group.contextual-spell-check]
optional = true

[tool.poetry.group.contextual-spell-check.dependencies]
neuspell = "^1.0.0"

[tool.poetry.group.ngram-analysis]
optional = true

[tool.poetry.group.ngram-analysis.dependencies]
nltk = "^3.8.1"

[tool.poetry.group.graph-analysis]
optional = true

[tool.poetry.group.graph-analysis.dependencies]
networkx = "^3.1"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
pytest = "^8.3.5"
sphinx = "^7.0.0"
sphinx_rtd_theme = "^1.2.0"
flake8 = "^6.1.0"
black = "^23.11.0"
isort = "^5.12.0"
mypy = "^1.6.0"
tomli = "^2.2.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.setuptools]
packages = ["silverspeak", "silverspeak.homoglyphs"]

[tool.setuptools.package-data]
"silverspeak.homoglyphs" = ["identical_map.json", "unicode_confusables_map.json", "ocr_chars_map.json", "ocr_chars_refined_map.json"]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''
